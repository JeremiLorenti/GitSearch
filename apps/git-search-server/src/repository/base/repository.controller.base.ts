/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RepositoryService } from "../repository.service";
import { RepositoryCreateInput } from "./RepositoryCreateInput";
import { Repository } from "./Repository";
import { RepositoryFindManyArgs } from "./RepositoryFindManyArgs";
import { RepositoryWhereUniqueInput } from "./RepositoryWhereUniqueInput";
import { RepositoryUpdateInput } from "./RepositoryUpdateInput";
import { RepositorySortInput } from "../RepositorySortInput";
import { RepositoryFilterInput } from "../RepositoryFilterInput";
import { RepositorySearchInput } from "../RepositorySearchInput";

export class RepositoryControllerBase {
  constructor(protected readonly service: RepositoryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Repository })
  async createRepository(
    @common.Body() data: RepositoryCreateInput
  ): Promise<Repository> {
    return await this.service.createRepository({
      data: {
        ...data,

        commit: data.commit
          ? {
              connect: data.commit,
            }
          : undefined,

        owner: data.owner
          ? {
              connect: data.owner,
            }
          : undefined,

        tag: data.tag
          ? {
              connect: data.tag,
            }
          : undefined,
      },
      select: {
        commit: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        dateAdded: true,
        description: true,
        id: true,
        lastCommit: true,
        name: true,

        owner: {
          select: {
            id: true,
          },
        },

        stars: true,

        tag: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Repository] })
  @ApiNestedQuery(RepositoryFindManyArgs)
  async repositories(@common.Req() request: Request): Promise<Repository[]> {
    const args = plainToClass(RepositoryFindManyArgs, request.query);
    return this.service.repositories({
      ...args,
      select: {
        commit: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        dateAdded: true,
        description: true,
        id: true,
        lastCommit: true,
        name: true,

        owner: {
          select: {
            id: true,
          },
        },

        stars: true,

        tag: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Repository })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async repository(
    @common.Param() params: RepositoryWhereUniqueInput
  ): Promise<Repository | null> {
    const result = await this.service.repository({
      where: params,
      select: {
        commit: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        dateAdded: true,
        description: true,
        id: true,
        lastCommit: true,
        name: true,

        owner: {
          select: {
            id: true,
          },
        },

        stars: true,

        tag: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Repository })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRepository(
    @common.Param() params: RepositoryWhereUniqueInput,
    @common.Body() data: RepositoryUpdateInput
  ): Promise<Repository | null> {
    try {
      return await this.service.updateRepository({
        where: params,
        data: {
          ...data,

          commit: data.commit
            ? {
                connect: data.commit,
              }
            : undefined,

          owner: data.owner
            ? {
                connect: data.owner,
              }
            : undefined,

          tag: data.tag
            ? {
                connect: data.tag,
              }
            : undefined,
        },
        select: {
          commit: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          dateAdded: true,
          description: true,
          id: true,
          lastCommit: true,
          name: true,

          owner: {
            select: {
              id: true,
            },
          },

          stars: true,

          tag: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Repository })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRepository(
    @common.Param() params: RepositoryWhereUniqueInput
  ): Promise<Repository | null> {
    try {
      return await this.service.deleteRepository({
        where: params,
        select: {
          commit: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          dateAdded: true,
          description: true,
          id: true,
          lastCommit: true,
          name: true,

          owner: {
            select: {
              id: true,
            },
          },

          stars: true,

          tag: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/filter-repositories-by-stars")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async FilterRepositoriesByStars(
    @common.Body()
    body: RepositorySortInput
  ): Promise<string> {
    return this.service.FilterRepositoriesByStars(body);
  }

  @common.Get("/filter-by-stars")
  @swagger.ApiOkResponse({
    type: RepositoryFilterInput,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async FilterRepositoriesByStarsAction(
    @common.Body()
    body: RepositorySortInput
  ): Promise<RepositoryFilterInput[]> {
    return this.service.FilterRepositoriesByStarsAction(body);
  }

  @common.Get("/:id/search-repositories")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async SearchRepositories(
    @common.Body()
    body: RepositorySortInput
  ): Promise<string> {
    return this.service.SearchRepositories(body);
  }

  @common.Get("/search-repositories")
  @swagger.ApiOkResponse({
    type: RepositorySearchInput,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async SearchRepositoriesAction(
    @common.Body()
    body: RepositorySortInput
  ): Promise<RepositorySearchInput[]> {
    return this.service.SearchRepositoriesAction(body);
  }

  @common.Get("/:id/sort-repositories-by-date-added")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async SortRepositoriesByDateAdded(
    @common.Body()
    body: RepositorySortInput
  ): Promise<string> {
    return this.service.SortRepositoriesByDateAdded(body);
  }

  @common.Get("/sort-by-date")
  @swagger.ApiOkResponse({
    type: RepositorySortInput,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async SortRepositoriesByDateAddedAction(
    @common.Body()
    body: RepositorySortInput
  ): Promise<RepositorySortInput[]> {
    return this.service.SortRepositoriesByDateAddedAction(body);
  }
}
