/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CommitService } from "../commit.service";
import { CommitCreateInput } from "./CommitCreateInput";
import { Commit } from "./Commit";
import { CommitFindManyArgs } from "./CommitFindManyArgs";
import { CommitWhereUniqueInput } from "./CommitWhereUniqueInput";
import { CommitUpdateInput } from "./CommitUpdateInput";
import { RepositoryFindManyArgs } from "../../repository/base/RepositoryFindManyArgs";
import { Repository } from "../../repository/base/Repository";
import { RepositoryWhereUniqueInput } from "../../repository/base/RepositoryWhereUniqueInput";
import { CommitRecentInput } from "../CommitRecentInput";

export class CommitControllerBase {
  constructor(protected readonly service: CommitService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Commit })
  async createCommit(@common.Body() data: CommitCreateInput): Promise<Commit> {
    return await this.service.createCommit({
      data: data,
      select: {
        author: true,
        createdAt: true,
        date: true,
        id: true,
        message: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Commit] })
  @ApiNestedQuery(CommitFindManyArgs)
  async commits(@common.Req() request: Request): Promise<Commit[]> {
    const args = plainToClass(CommitFindManyArgs, request.query);
    return this.service.commits({
      ...args,
      select: {
        author: true,
        createdAt: true,
        date: true,
        id: true,
        message: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Commit })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async commit(
    @common.Param() params: CommitWhereUniqueInput
  ): Promise<Commit | null> {
    const result = await this.service.commit({
      where: params,
      select: {
        author: true,
        createdAt: true,
        date: true,
        id: true,
        message: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Commit })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCommit(
    @common.Param() params: CommitWhereUniqueInput,
    @common.Body() data: CommitUpdateInput
  ): Promise<Commit | null> {
    try {
      return await this.service.updateCommit({
        where: params,
        data: data,
        select: {
          author: true,
          createdAt: true,
          date: true,
          id: true,
          message: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Commit })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCommit(
    @common.Param() params: CommitWhereUniqueInput
  ): Promise<Commit | null> {
    try {
      return await this.service.deleteCommit({
        where: params,
        select: {
          author: true,
          createdAt: true,
          date: true,
          id: true,
          message: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/repositories")
  @ApiNestedQuery(RepositoryFindManyArgs)
  async findRepositories(
    @common.Req() request: Request,
    @common.Param() params: CommitWhereUniqueInput
  ): Promise<Repository[]> {
    const query = plainToClass(RepositoryFindManyArgs, request.query);
    const results = await this.service.findRepositories(params.id, {
      ...query,
      select: {
        commit: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        dateAdded: true,
        description: true,
        id: true,
        lastCommit: true,
        name: true,

        owner: {
          select: {
            id: true,
          },
        },

        stars: true,

        tag: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/repositories")
  async connectRepositories(
    @common.Param() params: CommitWhereUniqueInput,
    @common.Body() body: RepositoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      repositories: {
        connect: body,
      },
    };
    await this.service.updateCommit({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/repositories")
  async updateRepositories(
    @common.Param() params: CommitWhereUniqueInput,
    @common.Body() body: RepositoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      repositories: {
        set: body,
      },
    };
    await this.service.updateCommit({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/repositories")
  async disconnectRepositories(
    @common.Param() params: CommitWhereUniqueInput,
    @common.Body() body: RepositoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      repositories: {
        disconnect: body,
      },
    };
    await this.service.updateCommit({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/get-recent-commits")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GetRecentCommits(
    @common.Body()
    body: CommitRecentInput
  ): Promise<string> {
    return this.service.GetRecentCommits(body);
  }

  @common.Get("/recent-commits")
  @swagger.ApiOkResponse({
    type: CommitRecentInput,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GetRecentCommitsAction(
    @common.Body()
    body: CommitRecentInput
  ): Promise<CommitRecentInput[]> {
    return this.service.GetRecentCommitsAction(body);
  }
}
